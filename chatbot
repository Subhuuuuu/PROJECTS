import numpy as np
import random
import json
import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline

class NLPChatbot:
    def __init__(self):
        # Load intents from JSON file
        try:
            with open('intents.json', 'r') as file:
                data = json.load(file)
                self.intents = {}
                for intent in data['intents']:
                    self.intents[intent['tag']] = {
                        'patterns': intent['patterns'],
                        'responses': intent['responses']
                    }
            print("✓ Intents loaded successfully from JSON file!")
        except FileNotFoundError:
            print("❌ Error: intents.json file not found.")
            exit()
        except json.JSONDecodeError:
            print("❌ Error: intents.json file is not valid JSON.")
            exit()
        
        # Prepare training data for intent classification
        self.training_data = []
        self.labels = []
        
        for intent_name, intent_data in self.intents.items():
            for pattern in intent_data["patterns"]:
                self.training_data.append(pattern)
                self.labels.append(intent_name)
        
        # Create and train the intent classifier
        self.classifier = make_pipeline(
            TfidfVectorizer(ngram_range=(1, 2), stop_words='english'),
            MultinomialNB()
        )
        self.classifier.fit(self.training_data, self.labels)
        print("✓ AI model trained successfully!")
        print(f"✓ Learned {len(self.intents)} intents: {list(self.intents.keys())}")
    
    def clean_text(self, text):
        """Simple text cleaning without NLTK"""
        text = text.lower().strip()
        text = re.sub(r'[^\w\s]', '', text)  # Remove punctuation
        return text
    
    def get_intent(self, user_input):
        """Get intent using multiple methods for better accuracy"""
        cleaned_input = self.clean_text(user_input)
        
        # Method 1: Simple exact pattern matching first (fast and reliable)
        for intent_name, intent_data in self.intents.items():
            for pattern in intent_data["patterns"]:
                if pattern in cleaned_input or cleaned_input in pattern:
                    return intent_name
        
        # Method 2: Use the trained classifier for fuzzy matching
        try:
            predicted_intent = self.classifier.predict([cleaned_input])[0]
            confidence = np.max(self.classifier.predict_proba([cleaned_input]))
            
            if confidence > 0.2:  # Very low confidence threshold
                return predicted_intent
        except:
            pass
        
        return "unknown"
    
    def get_response(self, intent):
        """Get appropriate response for the intent"""
        if intent in self.intents:
            return random.choice(self.intents[intent]["responses"])
        else:
            return "I'm not sure how to respond to that. Can you try asking differently?"
    
    def chat(self):
        print("\n" + "="*50)
        print("🤖 AI Chatbot Activated!")
        print("="*50)
        print("Chatbot: Hello! I'm an AI chatbot with various capabilities.")
        print("Try: 'hello', 'tell me a joke', 'what can you do?', 'how are you?'")
        print("Type 'quit', 'exit', or 'bye' to end our conversation.\n")
        
        while True:
            user_input = input("You: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'bye', 'goodbye']:
                print("Chatbot: Goodbye! It was nice talking to you. 👋")
                break
            
            if not user_input:
                print("Chatbot: Please type something so we can chat!")
                continue
            
            # Get intent and generate response
            intent = self.get_intent(user_input)
            response = self.get_response(intent)
            
            print(f"Chatbot: {response}")
            print(f"(Detected intent: {intent})")  # Debug info

# Create and run the chatbot
if __name__ == "__main__":
    chatbot = NLPChatbot()
    chatbot.chat()
