from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import json
import random

# Load dataset from JSON
with open("previous_chats.json", "r") as f:
    data = json.load(f)

# Extract messages and responses
messages = [row["message"] for row in data]
responses = [row["response"] for row in data]

# Train TF-IDF vectorizer
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(messages)

def chatbot_response(user_input, min_score=0.3):
    # Convert user input to vector
    user_vec = vectorizer.transform([user_input])

    # Compute cosine similarity
    similarity = cosine_similarity(user_vec, tfidf_matrix).flatten()
    best_score = similarity.max()

    if best_score < min_score:
        return "Sorry, I donâ€™t understand. Try rephrasing."

    # Find best matches
    best_indices = (similarity >= best_score - 0.01).nonzero()[0]
    chosen_index = random.choice(best_indices)
    return responses[chosen_index]

# Run chatbot loop
print("Chatbot: Hi! Type 'quit' to exit.")
while True:
    user_input = input("You: ")
    if user_input.lower() in ("quit", "exit", ":q"):
        print("Chatbot: Goodbye!")
        break
    print("Chatbot:", chatbot_response(user_input))
